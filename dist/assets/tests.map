{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/basic-functionality-test.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/close-button/component-test.js","dummy/tests/integration/components/ember-3d-folding-panel/component-test.js","dummy/tests/integration/components/folding-panel/component-test.js","dummy/tests/integration/components/item-square/component-test.js","dummy/tests/styles/app.stylelint-test.js","dummy/tests/styles/fonts.stylelint-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/mixins/layout-classes-test.js","dummy/tests/unit/services/panel-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/acceptance/basic-functionality-test', ['ember-native-dom-helpers', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (_emberNativeDomHelpers, _qunit, _moduleForAcceptance) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var run = Ember.run;\n\n\n  (0, _moduleForAcceptance.default)('Acceptance | basic functionality');\n\n  (0, _qunit.test)('Clicking opens/closes the panel', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var done;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              assert.expect(4);\n\n              done = assert.async();\n              _context2.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 4:\n              _context2.next = 6;\n              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.item-square')[0]);\n\n            case 6:\n\n              run.later(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        assert.equal((0, _emberNativeDomHelpers.find)('.fold-content h2').textContent.trim(), 'Client 1', 'Heading is correct');\n                        assert.equal((0, _emberNativeDomHelpers.find)('.fold-content p').textContent.trim().substring(0, 20), 'Lorem ipsum dolor si', 'Subheading is correct');\n                        assert.ok((0, _emberNativeDomHelpers.find)('.main-container').classList.contains('fold-is-open'), 'main-container has fold-is-open class');\n\n                        // Close the panel\n                        _context.next = 5;\n                        return (0, _emberNativeDomHelpers.click)('.gallery');\n\n                      case 5:\n\n                        assert.ok(!(0, _emberNativeDomHelpers.find)('.main-container').classList.contains('fold-is-open'), 'main-container does not have fold-is-open class');\n                        done();\n\n                      case 7:\n                      case 'end':\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, this);\n              })), 200);\n\n            case 7:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _qunit.test)('Close button closes the panel', function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var done;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              assert.expect(4);\n\n              done = assert.async();\n              _context3.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 4:\n              _context3.next = 6;\n              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.item-square')[0]);\n\n            case 6:\n\n              run.later(function () {\n                assert.equal((0, _emberNativeDomHelpers.find)('.fold-content h2').textContent.trim(), 'Client 1', 'Heading is correct');\n                assert.equal((0, _emberNativeDomHelpers.find)('.fold-content p').textContent.trim().substring(0, 20), 'Lorem ipsum dolor si', 'Subheading is correct');\n                assert.ok((0, _emberNativeDomHelpers.find)('.main-container').classList.contains('fold-is-open'), 'main-container has fold-is-open class');\n\n                // Close the panel\n                (0, _emberNativeDomHelpers.click)('.close-button');\n\n                assert.ok(!(0, _emberNativeDomHelpers.find)('.main-container').classList.contains('fold-is-open'), 'main-container does not have fold-is-open class');\n                done();\n              }, 200);\n\n            case 7:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = Ember.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = Ember.merge;\n  var run = Ember.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/integration/components/close-button/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('close-button', 'Integration | Component | close button', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(0);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"YdASIG3d\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"close-button\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n  });\n});","define('dummy/tests/integration/components/ember-3d-folding-panel/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('ember-3d-folding-panel', 'Integration | Component | ember 3d folding panel', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(0);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ENsqjYvO\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"ember-3d-folding-panel\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n  });\n});","define('dummy/tests/integration/components/folding-panel/component-test', ['ember-qunit', 'ember-native-dom-helpers'], function (_emberQunit, _emberNativeDomHelpers) {\n  'use strict';\n\n  var Service = Ember.Service;\n\n\n  var panelStub = Service.extend({\n    foldIsOpen: true,\n    selected: {\n      heading: 'Client 1',\n      subheading: 'Lorem ipsum dolor sit amet, consectetur.',\n      panelHeading: 'Panel Heading',\n      panelSubheading: 'Panel Subheading',\n      imageURL: 'img/logo1.png',\n      panelInfo: '<p>Foo</p>'\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('folding-panel', 'Integration | Component | folding panel', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('service:panel', panelStub);\n      this.inject.service('panel', { as: 'panel' });\n    }\n  });\n\n  (0, _emberQunit.test)('folding-panel renders selected info', function (assert) {\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"c0+E48A2\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"folding-panel\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberNativeDomHelpers.find)('.fold-content h2').textContent.trim(), 'Panel Heading');\n    assert.equal((0, _emberNativeDomHelpers.find)('.fold-content em').textContent.trim(), 'Panel Subheading');\n    assert.ok((0, _emberNativeDomHelpers.find)('.fold-content').textContent.trim().endsWith('<p>Foo</p>'));\n  });\n});","define('dummy/tests/integration/components/item-square/component-test', ['ember-qunit', 'ember-native-dom-helpers'], function (_emberQunit, _emberNativeDomHelpers) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('item-square', 'Integration | Component | item square', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('item renders correctly', function (assert) {\n    this.set('item', {\n      heading: 'Heading Test',\n      subheading: 'Subheading Test'\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"v6+ukPbz\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-square\\\",null,[[\\\"item\\\"],[[20,[\\\"item\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberNativeDomHelpers.find)('h2').textContent.trim(), 'Heading Test');\n    assert.equal((0, _emberNativeDomHelpers.find)('p').textContent.trim(), 'Subheading Test');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tdLRACfE\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"item-square\\\",null,[[\\\"item\\\"],[[20,[\\\"item\\\"]]]],{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var text = String((0, _emberNativeDomHelpers.find)('.item-square').textContent.trim());\n    assert.ok(text.startsWith('template block text'));\n    assert.ok(text.includes('Heading Test'));\n    assert.ok(text.includes('Subheading Test'));\n    assert.ok(text.endsWith('View More'));\n  });\n});","define('dummy/tests/styles/app.stylelint-test', [], function () {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/app.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('dummy/tests/styles/fonts.stylelint-test', [], function () {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/fonts.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('dummy/tests/test-helper', ['dummy/app', '@ember/test-helpers', 'ember-qunit'], function (_app, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create({ autoboot: false }));\n\n  (0, _emberQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/basic-functionality-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/basic-functionality-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/close-button/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/close-button/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ember-3d-folding-panel/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ember-3d-folding-panel/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/folding-panel/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/folding-panel/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/item-square/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/item-square/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/layout-classes-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/layout-classes-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/panel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/panel-test.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/unit/mixins/layout-classes-test', ['ember-3d-folding-panel/mixins/layout-classes', 'qunit'], function (_layoutClasses, _qunit) {\n  'use strict';\n\n  var EmObj = Ember.Object;\n\n\n  (0, _qunit.module)('Unit | Mixin | layout classes');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var LayoutClassesObject = EmObj.extend(_layoutClasses.default);\n    var subject = LayoutClassesObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/services/panel-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:panel', 'Unit | Service | panel', {\n    needs: ['service:device/layout']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingszIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}